# vim:set ft=dockerfile:
ARG BASE_IMAGE
ARG THIRD_PARTY_SOURCES_DIR=/usr/share/cassandra/third-party-sources
ARG http_proxy
ARG https_proxy
ARG no_proxy
ARG use_proxy

### DISABLE SOURCE DOWNLOAD ###
#FROM debian:stretch-slim as builder
#ARG THIRD_PARTY_SOURCES_DIR

#RUN apt-get update && apt-get install -y --no-install-recommends ca-certificates wget unzip tar && rm -rf /var/lib/apt/lists/*
#COPY download-sources.sh /
#COPY sources-url.csv /
#RUN mkdir -p ${THIRD_PARTY_SOURCES_DIR} && \
#    cd ${THIRD_PARTY_SOURCES_DIR} && \
#    cat /sources-url.csv | /download-sources.sh

FROM ${BASE_IMAGE}
LABEL maintainer="support@strapdata.com"
LABEL description="Elassandra based on Cassandra 4.1 docker image"


#COPY --from=builder ${THIRD_PARTY_SOURCES_DIR} ${THIRD_PARTY_SOURCES_DIR}

# explicitly set user/group IDs
RUN set -eux; groupadd -r cassandra --gid=999; useradd -r -g cassandra --uid=999 cassandra

RUN set -eux; \
    apt-get update; \
	apt-get install -y --no-install-recommends \
# solves warning: "jemalloc shared library could not be preloaded to speed up memory allocations"
		libjemalloc2 \
# "free" is used by cassandra-env.sh
		procps \
# "cqlsh" needs a python interpreter
		python3 \
# "ip" is not required by Cassandra itself, but is commonly used in scripting Cassandra's configuration (since it is so fixated on explicit IP addresses)
		iproute2 \
# Cassandra will automatically use numactl if available
#   https://github.com/apache/cassandra/blob/18bcda2d4c2eba7370a0b21f33eed37cb730bbb3/bin/cassandra#L90-L100
#   https://github.com/apache/cassandra/commit/604c0e87dc67fa65f6904ef9a98a029c9f2f865a
		numactl \
		python3-pip \
		jq \
	;

RUN     pip install -U pip yq; \
	rm -rf /var/lib/apt/lists/*; \
# https://issues.apache.org/jira/browse/CASSANDRA-15767 ("bin/cassandra" only looks for "libjemalloc.so" or "libjemalloc.so.1" which doesn't match our "libjemalloc.so.2")
	libjemalloc="$(readlink -e /usr/lib/*/libjemalloc.so.2)"; \
	ln -sT "$libjemalloc" /usr/local/lib/libjemalloc.so; \
	ldconfig

# grab gosu for easy step-down from root
# https://github.com/tianon/gosu/releases
ENV GOSU_VERSION 1.17
RUN export http_proxy=${http_proxy}
RUN export https_proxy=${http_proxy}
RUN export use_proxy=${use_proxy} 
RUN set -eux; \
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends ca-certificates gnupg wget; \
	rm -rf /var/lib/apt/lists/*; \
	dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')"; \
	wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \
	wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \
	export GNUPGHOME="$(mktemp -d)"; \
	gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \
	gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \
	gpgconf --kill all; \
	rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	chmod +x /usr/local/bin/gosu; \
	gosu --version; \
	gosu nobody true

ENV CASSANDRA_HOME /opt/cassandra
ENV CASSANDRA_CONF /etc/cassandra
ENV CASSANDRA_LOGDIR /var/log/cassandra
ENV CASSANDRA_DATA /var/lib/cassandra
ENV PATH $CASSANDRA_HOME/bin:$PATH

# build-time arguments
ARG CASSANDRA_VERSION
ENV CASSANDRA_VERSION=${CASSANDRA_VERSION}

# optional sha1 of the commit
ARG CASSANDRA_COMMIT
ENV CASSANDRA_COMMIT=${CASSANDRA_COMMIT}

ARG ELASSANDRA_VERSION
ENV ELASSANDRA_VERSION=${ELASSANDRA_VERSION}

# optional sha1 of the commit
ARG ELASSANDRA_COMMIT
ENV ELASSANDRA_COMMIT=${ELASSANDRA_COMMIT}

# location of the elassandra package on the building machine
ARG ELASSANDRA_PACKAGE

# copy the elassandra package into the image
COPY ${ELASSANDRA_PACKAGE} /elassandra-${ELASSANDRA_VERSION}.tar.gz


RUN set -eux; \
	savedAptMark="$(apt-mark showmanual)"; \
	apt-get update; \
	apt-get install -y --no-install-recommends ca-certificates gnupg wget dpkg-dev; \
	rm -rf /var/lib/apt/lists/*; \
	\
	apt-mark auto '.*' > /dev/null; \
	[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark > /dev/null; \
	apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \
	\
	mkdir -p "$CASSANDRA_HOME"; \
	tar --extract --file /elassandra-${ELASSANDRA_VERSION}.tar.gz --directory "$CASSANDRA_HOME" --strip-components 1; \
	rm /elassandra-${ELASSANDRA_VERSION}.tar.gz; \
	\
	[ ! -e "$CASSANDRA_CONF" ]; \
	mv "$CASSANDRA_HOME/conf" "$CASSANDRA_CONF"; \
	ln -sT "$CASSANDRA_CONF" "$CASSANDRA_HOME/conf"; \
	\
	dpkgArch="$(dpkg --print-architecture)"; \
	case "$dpkgArch" in \
		ppc64el) \
# https://issues.apache.org/jira/browse/CASSANDRA-13345
# "The stack size specified is too small, Specify at least 328k"
			grep -- '^-Xss256k$' "$CASSANDRA_CONF/jvm-server.options"; \
			sed -ri 's/^-Xss256k$/-Xss512k/' "$CASSANDRA_CONF/jvm-server.options"; \
			grep -- '^-Xss512k$' "$CASSANDRA_CONF/jvm-server.options"; \
			;; \
	esac; \
	\
	mkdir -p "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
	chown -R cassandra:cassandra "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
	chmod 1777 "$CASSANDRA_CONF" /var/lib/cassandra /var/log/cassandra; \
	chmod -R a+rwX "$CASSANDRA_CONF"; \
	rmdir "$CASSANDRA_HOME/data"; \
	rmdir "$CASSANDRA_HOME/logs"; \
	ln -sT /var/lib/cassandra "$CASSANDRA_HOME/data"; \
	ln -sT /var/log/cassandra "$CASSANDRA_HOME/logs"; \
	\
# smoke test
	cassandra -v

ENV CASSANDRA_CONFIG /etc/cassandra

VOLUME /var/lib/cassandra

# copy readiness and liveness probe script for kubernetes
COPY ready-probe.sh /
COPY live-probe.sh /

# Add custom logback.xml including variables.
COPY logback.xml $CASSANDRA_CONFIG/

# Add default JMX password file
COPY jmxremote.password $CASSANDRA_CONFIG/

ADD https://github.com/tomnomnom/gron/releases/download/v0.6.0/gron-linux-amd64-0.6.0.tgz gron.tar.gz

# Can't use COPY --chown here because it is not supported on old docker versions
RUN chown cassandra:cassandra ready-probe.sh $CASSANDRA_CONFIG/logback.xml $CASSANDRA_CONFIG/jmxremote.password && \
    chmod 0400 $CASSANDRA_CONFIG/jmxremote.password && \
    tar zxvf gron.tar.gz -C /usr/local/bin && chmod a+x /usr/local/bin/gron && rm -f gron.tar.gz

COPY docker-entrypoint.sh /usr/local/bin/
RUN ln -s usr/local/bin/docker-entrypoint.sh /docker-entrypoint.sh # backwards compat
ENTRYPOINT ["docker-entrypoint.sh"]

# create the entrypoint init.d directory
RUN mkdir -p /docker-entrypoint-init.d && chown cassandra:cassandra /docker-entrypoint-init.d


# Fix the trickle_fsync default for SSDs.
ENV CASSANDRA__trickle_fsync true

# 7000: intra-node communication
# 7001: TLS intra-node communication
# 7199: JMX
# 9042: CQL
# 9142 : encrypted CQL
# 9200: elassandra HTTP
# 9300: elasticsearch transport
EXPOSE 7000 7001 7199 9042 9142 9200 9300
CMD ["cassandra", "-f"]
